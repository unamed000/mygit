


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    

    <title>Quickstart &mdash; XPSPL 3.0.0 documentation</title>
<!-- RTD <head> -->
<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
<script type="text/javascript" src="//media.readthedocs.org/javascript/underscore.js"></script>
<script type="text/javascript" src="//media.readthedocs.org/javascript/doctools.js"></script>

  <meta name="viewport" content="width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;"/>

<script type="text/javascript">
  // This is included here for Javascript that doesn't have access to the templates.
  var doc_version = "latest";
  var doc_slug = "xpspl";
</script>

<script type="text/javascript" src="//media.readthedocs.org/javascript/rtd.js"></script>
<!-- end RTD <head> -->

    
    <link rel="stylesheet" href="../_static/rtd.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../',
        VERSION:     '3.0.0',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <link rel="top" title="XPSPL 3.0.0 documentation" href="../index.html" />
    <link rel="next" title="Configuration" href="configuration.html" />
    <link rel="prev" title="Installing XPSPL" href="install.html" /> 
  </head>
  <body>
    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="configuration.html" title="Configuration"
             accesskey="N">next</a> |</li>
        <li class="right" >
          <a href="install.html" title="Installing XPSPL"
             accesskey="P">previous</a> |</li>
        <li><a href="../index.html">XPSPL 3.0.0 documentation</a> &raquo;</li> 
      </ul>
    </div>  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body">
            
  <div class="section" id="quickstart">
<h1><a class="toc-backref" href="#id3">Quickstart</a><a class="headerlink" href="#quickstart" title="Permalink to this headline">¶</a></h1>
<p><em>Updated - Dec 28, 2012</em></p>
<p>This guide provides an introduction into programming with XPSPL.</p>
<p>It is recommended that you have at a minimum 2 hours of time to cover this guide
at a glance and a full day to cover it top to bottom.</p>
<p>This guide covers the following topics,</p>
<div class="contents topic" id="contents">
<p class="topic-title first">Contents</p>
<ul class="simple">
<li><a class="reference internal" href="#quickstart" id="id3">Quickstart</a><ul>
<li><a class="reference internal" href="#signal-driven-programming-with-xpspl" id="id4">Signal Driven Programming with XPSPL</a><ul>
<li><a class="reference internal" href="#examples" id="id5">Examples</a><ul>
<li><a class="reference internal" href="#echo-server" id="id6">Echo Server</a></li>
<li><a class="reference internal" href="#flow-interruptions" id="id7">Flow Interruptions</a></li>
<li><a class="reference internal" href="#network-switch-server" id="id8">Network Switch Server</a></li>
</ul>
</li>
</ul>
</li>
<li><a class="reference internal" href="#xpspl-the-php-signal-library" id="id9">XPSPL The PHP Signal Library</a><ul>
<li><a class="reference internal" href="#history" id="id10">History</a></li>
<li><a class="reference internal" href="#limitations" id="id11">Limitations</a></li>
</ul>
</li>
</ul>
</li>
<li><a class="reference internal" href="#performance" id="id12">Performance</a><ul>
<li><a class="reference internal" href="#environment" id="id13">Environment</a><ul>
<li><a class="reference internal" href="#starting-applications" id="id14">Starting applications</a></li>
<li><a class="reference internal" href="#managing-applications" id="id15">Managing applications</a></li>
<li><a class="reference internal" href="#short-lived-applications" id="id16">Short lived applications</a></li>
</ul>
</li>
<li><a class="reference internal" href="#signals-handles-and-events" id="id17">Signals, Handles and Events</a></li>
</ul>
</li>
</ul>
</div>
<div class="section" id="signal-driven-programming-with-xpspl">
<h2><a class="toc-backref" href="#id4">Signal Driven Programming with XPSPL</a><a class="headerlink" href="#signal-driven-programming-with-xpspl" title="Permalink to this headline">¶</a></h2>
<p>Signal driven programming is the development of software using a design where
the flow is determined by signals.</p>
<p>It relies heavily on the use of event processes, interruptions, mutable data and
insane levels of decoupling.</p>
<p>If you know GUI this will feel very familiar.</p>
<p>The idea is nothing new and is in use right now on the device your reading this
with, unless your on paper.</p>
<p>Designing software using SDP is not much different than designing it using
OOP or functional type designs only in that it provides programmers more power
in directing and interrupting flow.</p>
<p>SDP is not a replacement for your current software design.</p>
<p>In many situations SDP is not the choice for performing a process.</p>
<p>SDP is only a good candidate under the following circumstances,</p>
<blockquote>
<div><ul class="simple">
<li>The software must be a long served process that can handle tens to thousands
of separate operations occurring at any given time.</li>
<li>The software has the probability that it will require enhancements to it&#8217;s
core flow causing potential rewrites of production stable versions.</li>
<li>Many concurrent unrelated processes must be performed using the same data.</li>
</ul>
</div></blockquote>
<p>It should be mentioned that SDP suites well for short-lived software as
seen with most standard PHP web applications.</p>
<div class="section" id="examples">
<h3><a class="toc-backref" href="#id5">Examples</a><a class="headerlink" href="#examples" title="Permalink to this headline">¶</a></h3>
<p>These examples are not real world and are for informational purposes only.</p>
<div class="section" id="echo-server">
<h4><a class="toc-backref" href="#id6">Echo Server</a><a class="headerlink" href="#echo-server" title="Permalink to this headline">¶</a></h4>
<p>This example is a network server that echos the client back it&#8217;s own data it
sent.</p>
<div class="highlight-php"><div class="highlight"><pre><span class="x"> </span><span class="cp">&lt;?php</span>
 <span class="sd">/**</span>
<span class="sd"> * Echo Server</span>
<span class="sd"> *</span>
<span class="sd"> * This example demonstrates a simple echo server that spits back anything that</span>
<span class="sd"> * was sent and then disconnects.</span>
<span class="sd"> */</span>
<span class="nx">import</span><span class="p">(</span><span class="s1">&#39;network&#39;</span><span class="p">);</span>

<span class="nv">$socket</span> <span class="o">=</span> <span class="nx">network\connect</span><span class="p">(</span><span class="s1">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;port&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;1337&#39;</span><span class="p">],</span> <span class="k">function</span><span class="p">(){</span>
    <span class="k">echo</span> <span class="s2">&quot;Server Running on &quot;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">socket</span><span class="o">-&gt;</span><span class="na">get_address</span><span class="p">()</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
<span class="p">});</span>

<span class="nv">$socket</span><span class="o">-&gt;</span><span class="na">on_client</span><span class="p">(</span><span class="nx">null_exhaust</span><span class="p">(</span><span class="k">function</span><span class="p">(){</span>
    <span class="k">echo</span> <span class="s2">&quot;Connection &quot;</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">socket</span><span class="o">-&gt;</span><span class="na">write</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">socket</span><span class="o">-&gt;</span><span class="na">read</span><span class="p">());</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">socket</span><span class="o">-&gt;</span><span class="na">disconnect</span><span class="p">();</span>
<span class="p">}));</span>
</pre></div>
</div>
</div>
<div class="section" id="flow-interruptions">
<h4><a class="toc-backref" href="#id7">Flow Interruptions</a><a class="headerlink" href="#flow-interruptions" title="Permalink to this headline">¶</a></h4>
<p>This example demonstrates interruption the flow of a signal.</p>
<div class="highlight-php"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="c1">// When foo is emitted insert bar into the event</span>
<span class="nx">before</span><span class="p">(</span><span class="k">new</span> <span class="nx">Foo</span><span class="p">(),</span> <span class="k">function</span><span class="p">(</span><span class="nv">$event</span><span class="p">){</span>
    <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">bar</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span>
<span class="p">});</span>

<span class="c1">// Handle Foo</span>
<span class="nx">signal</span><span class="p">(</span><span class="k">new</span> <span class="nx">Foo</span><span class="p">(),</span> <span class="k">function</span><span class="p">(</span><span class="nv">$event</span><span class="p">){</span>
    <span class="k">echo</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">bar</span><span class="p">;</span>
<span class="p">});</span>

<span class="c1">// After foo is emitted unset bar in the event</span>
<span class="nx">after</span><span class="p">(</span><span class="k">new</span> <span class="nx">Foo</span><span class="p">(),</span> <span class="k">function</span><span class="p">(</span><span class="nv">$event</span><span class="p">){</span>
    <span class="nb">unset</span><span class="p">(</span><span class="nv">$event</span><span class="o">-&gt;</span><span class="na">bar</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">emit</span><span class="p">(</span><span class="k">new</span> <span class="nx">Foo</span><span class="p">());</span>
</pre></div>
</div>
</div>
<div class="section" id="network-switch-server">
<h4><a class="toc-backref" href="#id8">Network Switch Server</a><a class="headerlink" href="#network-switch-server" title="Permalink to this headline">¶</a></h4>
<p>Let&#8217;s examine a more real world example.</p>
<p>Take the following network switch server that transmits start and stop signals
from an outside device to an HTML document in a video recording device.</p>
<div class="highlight-php"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="sd">/**</span>
<span class="sd"> * Load the networking and time modules.</span>
<span class="sd"> */</span>
<span class="nx">load_module</span><span class="p">(</span><span class="s1">&#39;network&#39;</span><span class="p">);</span>
<span class="nx">load_module</span><span class="p">(</span><span class="s1">&#39;time&#39;</span><span class="p">);</span>

<span class="c1">// Create a new network connection</span>
<span class="nv">$connection</span> <span class="o">=</span> <span class="nx">network\connect</span><span class="p">(</span><span class="s1">&#39;0.0.0.0:1337&#39;</span><span class="p">);</span>

<span class="c1">// Failsafe awake signal</span>
<span class="nv">$awake</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">time\SIG_Awake</span><span class="p">(</span><span class="mi">45</span><span class="p">,</span> <span class="nx">TIME_SECONDS</span><span class="p">);</span>

<span class="c1">// When a connection is received perform the following</span>
<span class="c1">// * Check the client device type</span>
<span class="c1">// * If request device check if video connected and emit requested signal</span>
<span class="c1">// * If video device set as video device in server</span>
<span class="nv">$connection</span><span class="o">-&gt;</span><span class="na">on_client</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$client</span><span class="p">,</span> <span class="nv">$server</span><span class="p">){</span>
    <span class="c1">// Read in the giving data from connected client</span>
    <span class="nv">$client</span> <span class="o">=</span> <span class="nx">json_parse</span><span class="p">(</span><span class="nv">$client</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">);</span>
    <span class="c1">// Check the client type</span>
    <span class="c1">// For devices that communicate in</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$client</span><span class="o">-&gt;</span><span class="na">type</span> <span class="o">===</span> <span class="nx">DEVICE_REQUEST</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Check and error back to device if no video device</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$server</span><span class="o">-&gt;</span><span class="na">device_video</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">write</span><span class="p">(</span><span class="s2">&quot;{error: &#39;Video device not connected&#39;;}&quot;</span><span class="p">);</span>
            <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">disconnect</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="c1">// Check command from device</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$data</span><span class="o">-&gt;</span><span class="na">start</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">emit</span><span class="p">(</span><span class="k">new</span> <span class="nx">SIG_Video_Device_Start</span><span class="p">(),</span> <span class="nv">$server</span><span class="o">-&gt;</span><span class="na">device_video</span><span class="p">);</span>
            <span class="c1">// Failsafe to shutdown the device 45 seconds after connecting</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">is_exhausted</span><span class="p">(</span><span class="nv">$awake</span><span class="p">))</span> <span class="p">{</span>
                <span class="nx">time\awake</span><span class="p">(</span><span class="mi">45</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$server</span><span class="p">){</span>
                    <span class="nx">signal</span><span class="p">(</span>
                        <span class="k">new</span> <span class="nx">SIG_Video_Device_Stop</span><span class="p">(),</span>
                        <span class="nv">$server</span><span class="o">-&gt;</span><span class="na">device_video</span>
                    <span class="p">);</span>
                <span class="p">},</span> <span class="nx">TIME_SECONDS</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$data</span><span class="o">-&gt;</span><span class="na">stop</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">emit</span><span class="p">(</span><span class="k">new</span> <span class="nx">SIG_Video_Device_Stop</span><span class="p">(),</span> <span class="nv">$server</span><span class="o">-&gt;</span><span class="na">device_video</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">disconnect</span><span class="p">();</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// Video device we send signals</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$client</span><span class="o">.</span><span class="nx">type</span> <span class="o">===</span> <span class="nx">DEVICE_VIDEO</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$server</span><span class="o">-&gt;</span><span class="na">device_video</span> <span class="o">=</span> <span class="nv">$client</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">});</span>

<span class="sd">/**</span>
<span class="sd"> * Handles the video device start signal</span>
<span class="sd"> */</span>
<span class="nx">signal</span><span class="p">(</span><span class="k">new</span> <span class="nx">SIG_Video_Device_Start</span><span class="p">(),</span> <span class="nx">non_exhaust</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$device</span><span class="p">){</span>
    <span class="nv">$device</span><span class="o">-&gt;</span><span class="na">write</span><span class="p">(</span><span class="nx">write_video_cmd</span><span class="p">(</span><span class="k">false</span><span class="p">,</span> <span class="k">true</span><span class="p">));</span>
<span class="p">}));</span>

<span class="sd">/**</span>
<span class="sd"> * Handles the video device stop signal</span>
<span class="sd"> */</span>
<span class="nx">signal</span><span class="p">(</span><span class="k">new</span> <span class="nx">SIG_Video_Device_Stop</span><span class="p">(),</span> <span class="nx">non_exhaust</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$device</span><span class="p">){</span>
    <span class="nv">$device</span><span class="o">-&gt;</span><span class="na">write</span><span class="p">(</span><span class="nx">write_video_cmd</span><span class="p">(</span><span class="k">false</span><span class="p">,</span> <span class="k">true</span><span class="p">));</span>
<span class="p">});</span>

<span class="sd">/**</span>
<span class="sd"> * Prepares a JSON message to send the video device</span>
<span class="sd"> */</span>
<span class="k">function</span> <span class="nf">write_video_cmd</span><span class="p">(</span><span class="nv">$start</span> <span class="o">=</span> <span class="k">false</span><span class="p">,</span> <span class="nv">$stop</span> <span class="o">=</span> <span class="k">false</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$obj</span> <span class="o">=</span> <span class="k">new</span> <span class="k">stdClass</span><span class="p">();</span>
    <span class="nv">$obj</span><span class="o">-&gt;</span><span class="na">start</span> <span class="o">=</span> <span class="nv">$start</span><span class="p">;</span>
    <span class="nv">$obj</span><span class="o">-&gt;</span><span class="na">stop</span> <span class="o">=</span> <span class="nv">$stop</span><span class="p">;</span>
    <span class="k">return</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$obj</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
</div>
<div class="section" id="xpspl-the-php-signal-library">
<h2><a class="toc-backref" href="#id9">XPSPL The PHP Signal Library</a><a class="headerlink" href="#xpspl-the-php-signal-library" title="Permalink to this headline">¶</a></h2>
<div class="section" id="history">
<h3><a class="toc-backref" href="#id10">History</a><a class="headerlink" href="#history" title="Permalink to this headline">¶</a></h3>
<p>Code for XPSPL began sometime in 2008 as a project to learn EDP, though the name
and design have changed a few times since then, the goal of changing the way we
write software has not.</p>
<p>On Nov 10, 2010 an early version was uploaded to the open-source community.</p>
<p>By late 2011 XPSPL began use in production stable software and continues to this
day.</p>
</div>
<div class="section" id="limitations">
<h3><a class="toc-backref" href="#id11">Limitations</a><a class="headerlink" href="#limitations" title="Permalink to this headline">¶</a></h3>
<p>I always find it is best to know what something can&#8217;t do before what it can.</p>
<p>Here is a list of unsupported features,</p>
<blockquote>
<div><ul class="simple">
<li>Threads and forks</li>
<li>epoll, kqueue, poll (select is supported)</li>
<li>Guaranteed real time</li>
</ul>
</div></blockquote>
<p>A suitable epoll, kqueue and poll module is planned but requires funding.</p>
<p>Contributions for these features are always appreciated.</p>
</div>
</div>
</div>
<div class="section" id="performance">
<h1><a class="toc-backref" href="#id12">Performance</a><a class="headerlink" href="#performance" title="Permalink to this headline">¶</a></h1>
<p>XPSPL performance well when using less than 10,000 signals, once pushed over performance can become erratic.</p>
<p>The following performance test was generated on a 2.7GHZ i5 processor.</p>
<p>Note that all times are in milliseconds.</p>
<script type="text/javascript" src="https://www.google.com/jsapi"></script>
<script type="text/javascript">
  google.load("visualization", "1", {packages:["corechart"]});
  google.setOnLoadCallback(drawChart);
  function drawChart() {
    var sig_inst = [['Time', 'Signals Installed']];
    var sig_emit = [['Time', 'Signals Emitted']];
            sig_emit.push([1.8119812011719E-5, 2]);
    sig_emit.push([3.2186508178711E-5, 4]);
    sig_emit.push([6.6995620727539E-5, 8]);
    sig_emit.push([0.013117074966431, 16]);
    sig_emit.push([0.00025606155395508, 32]);
    sig_emit.push([0.00048303604125977, 64]);
    sig_emit.push([0.00095605850219727, 128]);
    sig_emit.push([0.0020380020141602, 256]);
    sig_emit.push([0.00376296043396, 512]);
    sig_emit.push([0.0071640014648438, 1024]);
    sig_emit.push([0.015555858612061, 2048]);
    sig_emit.push([0.083690166473389, 4096]);
    sig_emit.push([0.063318014144897, 8192]);
    sig_emit.push([0.2115318775177, 16384]);
    sig_inst.push([5.1021575927734E-5, 2]);
    sig_inst.push([4.5061111450195E-5, 4]);
    sig_inst.push([7.6055526733398E-5, 8]);
    sig_inst.push([0.00017189979553223, 16]);
    sig_inst.push([0.00034117698669434, 32]);
    sig_inst.push([0.00063896179199219, 64]);
    sig_inst.push([0.0012118816375732, 128]);
    sig_inst.push([0.0023870468139648, 256]);
    sig_inst.push([0.0045371055603027, 512]);
    sig_inst.push([0.0094959735870361, 1024]);
    sig_inst.push([0.019057035446167, 2048]);
    sig_inst.push([0.050827026367188, 4096]);
    sig_inst.push([0.12461400032043, 8192]);
    sig_inst.push([0.2510769367218, 16384]);
    var data_1 = google.visualization.arrayToDataTable(sig_emit);
    var data_2 = google.visualization.arrayToDataTable(sig_inst);
    var chart = new google.visualization.LineChart(document.getElementById('chart_div'));
    chart.draw(data_1, {title: 'Signal Emit'});
    var chart = new google.visualization.LineChart(document.getElementById('chart_div2'));
    chart.draw(data_2, {title: 'Signal Install'});
  }
</script>
<div id="chart_div" style="width: 900px; height: 500px;"></div>
<div id="chart_div2" style="width: 900px; height: 500px;"></div><p>XPSPL&#8217;s API is designed to provide programmers with a natural speaking,
intuitive API.</p>
<p>The API has been extensively redesigned based on instinctual memory and usage
feedback from a team of highly skilled programmers.</p>
<p>Non-Modular API functions are not namespaced and should not provide any collisions
with your existing system*.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last"><a href="#id1"><span class="problematic" id="id2">*</span></a>Due to unknown system configurations it cannot be guaranteed that collisions
wont exist.</p>
</div>
<div class="highlight-php"><div class="highlight"><pre><span class="cp">&lt;?php</span>

<span class="sd">/**</span>
<span class="sd"> * This is a standard class used for math operations.</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">Math</span> <span class="p">{</span>

   <span class="sd">/**</span>
<span class="sd">    * This method will adds two numbers giving.</span>
<span class="sd">    */</span>
   <span class="k">public</span> <span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="nv">$num_1</span><span class="p">,</span> <span class="nv">$num_2</span><span class="p">)</span>
   <span class="p">{</span>
      <span class="k">return</span> <span class="nv">$num_1</span> <span class="o">+</span> <span class="nv">$num_2</span><span class="p">;</span>
   <span class="p">}</span>

<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> * Add two numbers using our class.</span>
<span class="sd"> */</span>
<span class="nv">$math</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Math</span><span class="p">();</span>
<span class="k">echo</span> <span class="nv">$math</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>

<span class="c1">// Results</span>
<span class="mi">5</span>
</pre></div>
</div>
<p>Using XPSPL.</p>
<div class="highlight-php"><div class="highlight"><pre><span class="cp">&lt;?php</span>

<span class="sd">/**</span>
<span class="sd">* This is standard listener used for math operations.</span>
<span class="sd">*/</span>
<span class="k">class</span> <span class="nc">Math</span> <span class="p">{</span>

  <span class="sd">/**</span>
<span class="sd">   * Receive the add signal.</span>
<span class="sd">   */</span>
  <span class="k">public</span> <span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="nv">$event</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">return</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">num_1</span> <span class="o">+</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">num_2</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">listen</span><span class="p">(</span><span class="k">new</span> <span class="nx">Math</span><span class="p">());</span>
<span class="nv">$event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Event</span><span class="p">();</span>
<span class="nv">$event</span><span class="o">-&gt;</span><span class="na">num_1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="nv">$event</span><span class="o">-&gt;</span><span class="na">num_2</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<span class="nx">signal</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">,</span> <span class="nv">$event</span><span class="p">);</span>

<span class="c1">// Results</span>
<span class="k">echo</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">result</span><span class="p">;</span>
</pre></div>
</div>
<div class="highlight-php"><div class="highlight"><pre><span class="cp">&lt;?php</span>

<span class="sd">/**</span>
<span class="sd">* This is a standard function for adding to numbers.</span>
<span class="sd">*/</span>
<span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="nv">$num_1</span><span class="p">,</span> <span class="nv">$num_2</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nv">$num_1</span> <span class="o">+</span> <span class="nv">$num_2</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>

<span class="c1">// Results</span>
<span class="mi">5</span>
</pre></div>
</div>
<p>Using XPSPL.</p>
<div class="highlight-php"><pre>&lt;?php

/**
* This is a standard process for adding to numbers.
*/
function add($process)
{
    return $process-&gt;num_1 + $process-&gt;num_2'
}

handle('add', add);

$event = new Event();
$event-&gt;num_1 = 1;
$event-&gt;num_2 = 4;
signal('add', $event);
echo $event-&gt;result;

// Results
5</pre>
</div>
<div class="highlight-php"><div class="highlight"><pre><span class="cp">&lt;?php</span>

<span class="nv">$add</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="nv">$num_1</span><span class="p">,</span> <span class="nv">$num_2</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nv">$num_1</span> <span class="o">+</span> <span class="nv">$num_2</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>

<span class="c1">// Results</span>
<span class="mi">5</span>
</pre></div>
</div>
<p>Using XPSPL</p>
<div class="highlight-php"><div class="highlight"><pre><span class="cp">&lt;?php</span>

<span class="nx">handle</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">num_1</span> <span class="o">+</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">num_2</span><span class="p">;</span>
<span class="p">});</span>

<span class="nv">$event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Event</span><span class="p">();</span>
<span class="nv">$event</span><span class="o">-&gt;</span><span class="na">num_1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="nv">$event</span><span class="o">-&gt;</span><span class="na">num_2</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<span class="nx">signal</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">,</span> <span class="nv">$event</span><span class="p">);</span>
<span class="k">echo</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">result</span><span class="p">;</span>

<span class="c1">// Results</span>
<span class="mi">5</span>
</pre></div>
</div>
<div class="section" id="environment">
<h2><a class="toc-backref" href="#id13">Environment</a><a class="headerlink" href="#environment" title="Permalink to this headline">¶</a></h2>
<p>XPSPL is designed to run applications from inside an event loop.</p>
<p>It ships with the <tt class="docutils literal"><span class="pre">xpepl</span></tt> command for loading applications into its environments.</p>
<p>Developers writing an application that will be a long served process will typically want to run their applications
using this command.</p>
<p>XPSPL understands the following commands.</p>
<table border="1" class="docutils">
<colgroup>
<col width="14%" />
<col width="86%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Command</th>
<th class="head">Performs Action</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>-c,&#8211;config</td>
<td>Loads the giving file for XPSPL&#8217;s runtime configuration</td>
</tr>
<tr class="row-odd"><td>-h,&#8211;help</td>
<td>Displays the XPSPL help message</td>
</tr>
<tr class="row-even"><td>-p,&#8211;passthru</td>
<td>Ignore any subsequent arguments and pass them to the loaded file.</td>
</tr>
<tr class="row-odd"><td>&#8211;test</td>
<td>Run XPSPL&#8217;s unittests</td>
</tr>
<tr class="row-even"><td>&#8211;test-cover</td>
<td>Run XPSPL&#8217;s unittests and include code coverage information (Requires xdebug)</td>
</tr>
<tr class="row-odd"><td>-t/&#8211;time</td>
<td>Inform the loop to run for the given amount of milliseconds before shutting down.</td>
</tr>
<tr class="row-even"><td>-v/&#8211;version</td>
<td>Prints the current version of XPSPL.</td>
</tr>
</tbody>
</table>
<div class="section" id="starting-applications">
<h3><a class="toc-backref" href="#id14">Starting applications</a><a class="headerlink" href="#starting-applications" title="Permalink to this headline">¶</a></h3>
<p>Applications must be started from a single file loaded with XPSPL.</p>
<div class="highlight-console"><div class="highlight"><pre><span class="gp">$</span> XPSPL main.php
</pre></div>
</div>
</div>
<div class="section" id="managing-applications">
<h3><a class="toc-backref" href="#id15">Managing applications</a><a class="headerlink" href="#managing-applications" title="Permalink to this headline">¶</a></h3>
<p>Currently XPSPL does not support managing itself as a daemon.</p>
<p>We currently use runit for managing long lived processes, though any process manager you are familiar with will work just as well.</p>
</div>
<div class="section" id="short-lived-applications">
<h3><a class="toc-backref" href="#id16">Short lived applications</a><a class="headerlink" href="#short-lived-applications" title="Permalink to this headline">¶</a></h3>
<p>For applications that will have a very short life cycle, such as those typically loaded from an external interface (an HTTP Request)
you will need to manually load and enter your application into the event loop.</p>
<p>To do so you can use the following code as your <tt class="docutils literal"><span class="pre">index.php</span></tt>.</p>
<div class="highlight-php"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="c1">// Define any configuration options here</span>
<span class="c1">// ...</span>
<span class="c1">// ...</span>
<span class="c1">// ...</span>

<span class="c1">// load the XPSPL library</span>
<span class="k">require_once</span> <span class="s1">&#39;XPSPL/src/XPSPL.php&#39;</span><span class="p">;</span>

<span class="c1">// This would be your main file.</span>
<span class="k">require_once</span> <span class="s1">&#39;your_main_file.php&#39;</span><span class="p">;</span>

<span class="c1">// Start the event loop</span>
<span class="nx">XPSPL\loop</span><span class="p">();</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>Notice the last line calls <tt class="docutils literal"><span class="pre">XPSPL\loop</span></tt>?</p>
<p class="last">This must be the last line of code executed in your application since this will block anything that follows.</p>
</div>
</div>
</div>
<div class="section" id="signals-handles-and-events">
<h2><a class="toc-backref" href="#id17">Signals, Handles and Events</a><a class="headerlink" href="#signals-handles-and-events" title="Permalink to this headline">¶</a></h2>
</div>
</div>


          </div>
        </div>
      </div>
      <div class="sphinxsidebar">
        <div class="sphinxsidebarwrapper">


    
            <h3>Project Versions</h3>
            <ul id="sidebar_versions">
        
          <li><a href="/en/latest/">latest</a></li>
        
            </ul>
    
    <div id="searchbox" style="">
      <h3>RTD Search</h3>
        <form class="search" action="//readthedocs.org/search/project/" method="get">
          <input type="text" name="q" size="18">
          <input type="submit" value="Go">
          <input type="hidden" name="selected_facets" value="project_exact:xpspl">
        </form>
        <p class="searchtip" style="font-size: 90%">
            Full-text doc search.
        </p>
    </div>


  <h3><a href="../index.html">Table Of Contents</a></h3>
  <ul>
<li><a class="reference internal" href="#">Quickstart</a><ul>
<li><a class="reference internal" href="#signal-driven-programming-with-xpspl">Signal Driven Programming with XPSPL</a><ul>
<li><a class="reference internal" href="#examples">Examples</a><ul>
<li><a class="reference internal" href="#echo-server">Echo Server</a></li>
<li><a class="reference internal" href="#flow-interruptions">Flow Interruptions</a></li>
<li><a class="reference internal" href="#network-switch-server">Network Switch Server</a></li>
</ul>
</li>
</ul>
</li>
<li><a class="reference internal" href="#xpspl-the-php-signal-library">XPSPL The PHP Signal Library</a><ul>
<li><a class="reference internal" href="#history">History</a></li>
<li><a class="reference internal" href="#limitations">Limitations</a></li>
</ul>
</li>
</ul>
</li>
<li><a class="reference internal" href="#performance">Performance</a><ul>
<li><a class="reference internal" href="#environment">Environment</a><ul>
<li><a class="reference internal" href="#starting-applications">Starting applications</a></li>
<li><a class="reference internal" href="#managing-applications">Managing applications</a></li>
<li><a class="reference internal" href="#short-lived-applications">Short lived applications</a></li>
</ul>
</li>
<li><a class="reference internal" href="#signals-handles-and-events">Signals, Handles and Events</a></li>
</ul>
</li>
</ul>

  <h4>Previous topic</h4>
  <p class="topless"><a href="install.html"
                        title="previous chapter">Installing XPSPL</a></p>
  <h4>Next topic</h4>
  <p class="topless"><a href="configuration.html"
                        title="next chapter">Configuration</a></p>
  
    <h3>This Page</h3>
    <ul class="this-page-menu">
      
        <li><a href="../_sources/docs/quickstart.txt"
               rel="nofollow">Show Source</a></li>
      
      
        <li><a href="https://github.com/prggmr/XPSPL/blob/docs/docs/quickstart.rst">
          Show on GitHub</a></li>
        <li><a href="https://github.com/prggmr/XPSPL/edit/docs/docs/quickstart.rst">
          Edit on GitHub</a></li>
      
    </ul>
  

<div id="searchbox" style="display: none">
  <h3>Quick search</h3>
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    <p class="searchtip" style="font-size: 90%">
    Enter search terms or a module, class or function name.
    </p>
</div>
<script type="text/javascript">$('#searchbox').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="configuration.html" title="Configuration"
             >next</a> |</li>
        <li class="right" >
          <a href="install.html" title="Installing XPSPL"
             >previous</a> |</li>
        <li><a href="../index.html">XPSPL 3.0.0 documentation</a> &raquo;</li> 
      </ul>
    </div>

    <div class="footer">
        &copy; Copyright 2012, Nickolas Whiting.
      Created using <a href="http://sphinx.pocoo.org/">Sphinx</a> 1.1.2.
    </div>
 <!-- End original user content -->



<style type="text/css">
  .rtd-badge {
    position: fixed;
    display: block;
    bottom: 5px;
    height: 40px;
    text-indent: -9999em;
    border-radius: 3px;
    -moz-border-radius: 3px;
    -webkit-border-radius: 3px;
    box-shadow: 0 1px 0 rgba(0, 0, 0, 0.2), 0 1px 0 rgba(255, 255, 255, 0.2) inset;
    -moz-box-shadow: 0 1px 0 rgba(0, 0, 0, 0.2), 0 1px 0 rgba(255, 255, 255, 0.2) inset;
    -webkit-box-shadow: 0 1px 0 rgba(0, 0, 0, 0.2), 0 1px 0 rgba(255, 255, 255, 0.2) inset;
  }
  #version_menu {
    position: fixed;
    display: none;
    bottom: 11px;
    right: 166px;
    list-style-type: none;
    margin: 0;
  }
  .footer_popout:hover #version_menu {
    display: block;
  }
  #version_menu li {
    display: block;
    float: right;
  }
  #version_menu li a {
    display: block;
    padding: 6px 10px 4px 10px;
    margin: 7px 7px 0 0;
    font-weight: bold;
    font-size: 14px;
    height: 20px;
    line-height: 17px;
    text-decoration: none;
    color: #fff;
    background: #8ca1af url(../images/gradient-light.png) bottom left repeat-x;
    border-radius: 3px;
    -moz-border-radius: 3px;
    -webkit-border-radius: 3px;
    box-shadow: 0 1px 1px #465158;
    -moz-box-shadow: 0 1px 1px #465158;
    -webkit-box-shadow: 0 1px 1px #465158;
    text-shadow: 0 1px 1px rgba(0, 0, 0, 0.5);
  }
  #version_menu li a:hover {
    text-decoration: none;
    background-color: #697983;
    box-shadow: 0 1px 0px #465158;
    -moz-box-shadow: 0 1px 0px #465158;
    -webkit-box-shadow: 0 1px 0px #465158;
  }
  .rtd-badge.rtd {
    background: #3b4449 url(//media.readthedocs.org//images/badge-rtd.png) scroll 0px -46px no-repeat;
    border: 1px solid #282E32;
    width: 41px;
    right: 5px;
  }
  .footer_popout:hover .rtd-badge.rtd {
    background-position: top left;
    width: 160px;
  }
  .rtd-badge.revsys { background: #465158 url(//media.readthedocs.org//images/badge-revsys.png) top left no-repeat;
    border: 1px solid #1C5871;
    width: 290px;
    right: 173px;
  }
  .rtd-badge.revsys-inline-sponsored {
    position: inherit;
    margin-left: auto;
    margin-right: 175px;
    margin-bottom: 5px;
    background: #465158 url(//media.readthedocs.org//images/badge-revsys.png) top left no-repeat;
    border: 1px solid #1C5871;
    width: 290px;
    right: 173px;
  }
  .rtd-badge.revsys-inline {
    position: inherit;
    margin-left: auto;
    margin-right: 175px;
    margin-bottom: 5px;
    background: #465158 url(//media.readthedocs.org//images/badge-revsys-sm.png) top left no-repeat;
    border: 1px solid #1C5871;
    width: 205px;
    right: 173px;
  }

.rtd_doc_footer { background-color: #465158;}

</style>
<div class="rtd_doc_footer">
  <div class="footer_popout">
    <a href="//readthedocs.org/projects/xpspl/?fromdocs=xpspl" class="rtd-badge rtd"> Brought to you by Read the Docs</a>
    <ul id="version_menu">
      
        <li><a href="/en/latest/">latest</a></li>
      
    </ul>
  </div>
</div>
<!-- RTD Analytics Code -->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-17997319-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>


<!-- User Analytics Code -->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-37251695-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>



  </body>
</html>
</html>
</html>
</html>
</html>
</html>


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    

    <title>Quickstart &mdash; XPSPL 3.0.0 documentation</title>
<!-- RTD <head> -->
<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
<script type="text/javascript" src="//media.readthedocs.org/javascript/underscore.js"></script>
<script type="text/javascript" src="//media.readthedocs.org/javascript/doctools.js"></script>

  <meta name="viewport" content="width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;"/>

<script type="text/javascript">
  // This is included here for Javascript that doesn't have access to the templates.
  var doc_version = "latest";
  var doc_slug = "xpspl";
</script>

